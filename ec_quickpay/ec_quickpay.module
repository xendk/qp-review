<?php

// $Id$

/**
 * @file
 * Integrates quickpay.dk redirected payment service.
 *
 * Development sponsored by QuickPay.
 */

/**
 * Implementation of menu_hook()
 */
function ec_quickpay_menu() {
  $items = array();
  $items['quickpay/payment/%ec_receipt'] = array(
    'title' => 'Credit Card Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ec_quickpay_form', 2),
    'access callback' => TRUE, 
    'type' => MENU_CALLBACK
  );
  $items['admin/ecsettings/rtypes/quickpay/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ec_quickpay_settings'),
    'access arguments' => array('administer store'),
    'type' => MENU_LOCAL_TASK,
    'description' => 'Configuration for the QuickPay payment gateway',
  );
  $items['store/transaction/%ec_store_transaction/quickpay_capture'] = array(
    'title' => 'Capture QuickPay payments',
    'page callback' => 'ec_quickpay_transaction_capture',
    'page arguments' => array(2),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Settings form.
 *
 * This just reuses the standard form without modification.
 */
function ec_quickpay_settings() {
  $form = system_settings_form(quickpay_settings_form());
  return $form;
}

/**
 * Implementation of hook_receipt_info().
 *
 * Tell eC about our payment gateway.
 */
function ec_quickpay_receipt_info() {
  $currency = quickpay_supported_currencies();

  $rtypes = array(
    'quickpay' => array(
      'name' => t('QuickPay'),
      'description' => t('Checkout using QuickPay.'),
      /*
       TODO: Ask QuickPay whether they'd like an icon.
      'icon' => array(
        'src' => drupal_get_path('module', 'ec_quickpay') .'/images/QuickPay.png',
        'attributes' => array(
          'title' => t('QuickPay'),
        ),
      ),
      */
      'module' => array('ec_quickpay'),
      'currencies_supported' => $currency,
      'gateway_requirements' => array(
        // t('TODO: Ask QuickPay if they want any requirements shown here.'),
      ),
    ),
  );


  if (variable_get('quickpay_merchant', FALSE) and
      variable_get('quickpay_secret', FALSE)) {
    $rtypes['quickpay']['allow_payments'] = TRUE;
  /*
   Also:
      'allow_admin_payments' => TRUE,
      'allow_refunds'        => TRUE,
      'allow_payto'          => TRUE,
      'allow_recurring'      => TRUE,
  */
  }
  else {
    array_unshift($rtypes['quickpay']['gateway_requirements'], t('Before the QuickPay payment gateway can be used, the module needs to be configured. See the !settings page for configuring QuickPay', array('!settings' => l(t('settings'), 'admin/ecsettings/rtypes/quickpay/settings', array('query' => drupal_get_destination())))));
  }

  return $rtypes;
}

/**
 * Implementation of hook_receipt_payment_url().
 *
 * Redirects to a local form page, as QuickPay needs a post.
 */
function ec_quickpay_receipt_payment_url($receipt, $atype, $object) {
  $id = $receipt->erid;
  if ($inv_no = ec_receipt_alloc_invoke($atype, 'get_invoice_no', $object)) {
    $id .= "/" . $inv_no; // Not using this for anything but it may be good for the customer.
  }

  return 'quickpay/payment/' . $id;
}

/**
 * A form with a button to proceed to QuickPay, to complete the payment.
 */
function ec_quickpay_form(&$form_state, $receipt, $invoice_no) {
  $total = $receipt->amount;
  $currency = $receipt->currency;

  $return_url = variable_get('ec_receipt_return_url', 'node');
  if ($return_url == '%order-history') {
    $return_url = "user/$user->uid/store";
  }

  if ($total and $currency) {
    $form = quickpay_hosted_form($total, $currency,
                                 $receipt->erid,
                                 'ec-quickpay-form', 
                                 url($return_url, array('absolute' => TRUE)),
                                 url('store/payment/quickpay/' . $receipt->erid .
                                     '/cancel', array('absolute' => TRUE)),
                                 url('quickpay/' . $receipt->erid, array('absolute' => TRUE)));

    $form['message'] = array(
      '#type' => 'markup',
      '#value' => "<p>" . variable_get('quickpay_hosted_link_message',
                                       'In order to complete the payment, continue to QuickPay to enter your credit card information.') . "</p>",
      '#weight' => -5,
    );
  }
  else {
    // TODO: Better error handling.
    drupal_set_message(t('Internal error'), 'error');
  }
  return $form;

}

/**
 * Implementation of hook_quickpay_callback().
 *
 * Handles the callback and updates the receipt.
 */
function ec_quickpay_quickpay_callback($erid, $transaction) {
  $args = func_get_args();
  if (!is_numeric($erid)) {
    return NULL;
  }

  $receipt = ec_receipt_load($erid);
  if (!$receipt) {
    return NULL;
  }

  if ($receipt->type != 'quickpay') {
   watchdog('quickpay', 'Receipt @erid wasn\'t a QuickPay transaction',
            array('@erid' => $receipt->erid), WATCHDOG_ERROR);
   return FALSE;
  }

  if (!$transaction) {
    // quickpay_from_callback already logged it.
    drupal_access_denied();
    return;
  }

  $receipt->amount = $transaction['amount'];
  $receipt->currency = $transaction['currency'];
  $receipt->extern_id = $transaction['transaction'];

  switch (quickpay_result($transaction)) {
    case 'success':
      // TODO: RECEIPT_STATUS_COMPLETED when we support autocapture.
      $receipt->status = RECEIPT_STATUS_RECEIVED;
      break;
    case 'failed':
      $receipt->status = RECEIPT_STATUS_DENIED;
      break;
    case 'error':
      $receipt->status = RECEIPT_STATUS_FAILED;
      break;
    default:
      watchdog('quickpay', 'Unknown qpstat code: @code.',
               array('@code' => $transaction['qpstat']), WATCHDOG_ERROR);
      return;
      break;
  }
  ec_receipt_save($receipt);
}

/**
 * Implementation of hook_ec_receipt_status().
 *
 * When QuickPay receipts change status to received, touch any
 * transaction allocations, to make them allocate the payment and
 * trigger transaction processing.
 */
function ec_quickpay_ec_receipt_status($receipt, $original) {
  if ($receipt->type != 'quickpay') {
    return;
  }

  // Kick the allocation to in_picking..
  if ($receipt->status == RECEIPT_STATUS_RECEIVED && !empty($receipt->allocation)) {
    foreach ($receipt->allocation as $alloc) {
      if ($alloc['type'] == 'transaction') {
        // Tickle the allocation status
        $txn = ec_store_transaction_load($alloc['id']);
        ec_store_transaction_save($txn);
      }
    }
  }
}

/**
 * Implementation of hook_receipt_save().
 *
 * Stores the allocations of the receipt so we can look it up later.
 */
function ec_quickpay_receipt_save($receipt) {
  // Store link between allocation and receipt for later use.
  db_query('DELETE FROM {ec_quickpay_receipt_transaction} WHERE erid = %d', $receipt->erid);
  foreach ($receipt->allocation as $alloc) {
    db_query("INSERT INTO {ec_quickpay_receipt_transaction} (erid, type, etid) VALUES (%d, '%s', %d)", $receipt->erid, $alloc['type'], $alloc['id']);
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Adds links to capture/cancel receipt on receipt view.
 */
function ec_quickpay_form_ec_receipt_view_form_alter(&$form, &$form_state) {
  if ($form['receipt']['#value']->type == 'quickpay') {
      $qp_transaction = $form['receipt']['#value']->extern_id;
      
      $form['quickpay']['admin'] =
        array('#type' => 'markup',
              '#value' => l(t('Quickpay administration'), 
                            'https://manager.quickpay.dk/',
                            array(
                              'attributes' => array(
                                'target' => 'ec_quickpay'
                              ))));
                                  
      if ($form['receipt']['#value']->status == RECEIPT_STATUS_RECEIVED) {
        // payment received.
        // capture
        $form['overview']['quickpay']['capture'] =
          array(
            '#type' => 'submit',
            '#value' => t('Capture'),
            '#submit' => array('ec_quickpay_transaction_submit'),
            '#action' => 'capture',
          );
        // cancel
        $form['overview']['quickpay']['cancel'] =
          array(
            '#type' => 'submit',
            '#value' => t('Cancel'),
            '#submit' => array('ec_quickpay_transaction_submit'),
            '#action' => 'cancel',
          );
      }


  }
}

/**
 * Submit handler for receipt view.
 */
function ec_quickpay_transaction_submit($form, &$form_state) {
  $receipt = $form['receipt']['#value'];

  if (in_array($form_state['clicked_button']['#action'], array('capture', 'cancel'))) {
    if ($form_state['clicked_button']['#action'] == 'capture') {
      $qptxn = quickpay_capture(array('transaction' => $receipt->extern_id,
                                      'currency' => $receipt->currency),
                                $receipt->amount);
      $action = 'Capture';
      $amount = $qptxn['amount'];
      $did = 'captured';
    }
    else {
      $qptxn = quickpay_cancel(array('transaction' => $receipt->extern_id));
      $action = 'Cancel';
      $amount = 0;
      $did = 'cancelled';
    }
    
    if (quickpay_successful($qptxn)) {
      drupal_set_message(t("Successfully !did.", array('!did' => $did)));
      $receipt->status = RECEIPT_STATUS_COMPLETED;
      ec_receipt_save($receipt);
    }
    else {
      $error = _quickpay_qpstat_codes($qptxn['qpstat']);
      drupal_set_message(t('!action failed, reason given: %error',
                           array('%error' => $error, '!action' => $action)), 'error');
      $receipt->status = RECEIPT_STATUS_FAILED;
      ec_receipt_save($receipt);
    }
  }
}

/**
 * Implementation of hook_quickpay_popdown().
 */
function ec_quickpay_quickpay_popdown($erid, $status) {
  global $user;
  if (!is_numeric($erid)) {
    return NULL;
  }

  $receipt = ec_receipt_load($erid);
  if (!$receipt) {
    return NULL;
  }

  $receipt = ec_receipt_load($erid);

  /*
  // Make sure the user owns the transaction or is an admin.
  if ($user->uid != $txn->uid && $user->uid != 1  &&
      !user_access('administer store')) {
    return NULL;
  }
  */

  if ($status == 'success') {
    $url = variable_get('ec_receipt_return_url', 'node');
    if ($url == '%order-history') {
      $url = "user/$user->uid/store";
    }
    $url = url($url, array('absolute' => TRUE));
  }
  else { 
    // FIXME: configurable errorpage?
    $url = url('store/payment/quickpay/' . $erid . '/cancel', array('absolute' => TRUE));
  }
  return $url;
}

/**
 * Implementation of hook_link().
 *
 * Add links to transactions to capture related QuickPay receipts.
 */
function ec_quickpay_link($type, $object, $teaser = FALSE) {
  $links = array();
  if ($type == 'ec_receipt_allocation' && user_access(EC_PERM_MANAGE) &&
      $object->payment_method == 'quickpay' && $object->status == RECEIPT_STATUS_RECEIVED) {
    /*
     TODO: look into this.
    $links['captured'] = array(
      'title' => t('Capture'),
      'href' => 'store/receipt/'. $object->erid .'/reverse/'. $object->eaid,
      'attributes' => array(
        'title' => t('Capture'),
      ),
    );
    */
  }
  elseif ($type == 'ec_store_transaction') {
    $res = db_query("SELECT eqrt.erid, er.status, er.type FROM {ec_quickpay_receipt_transaction} eqrt LEFT JOIN {ec_receipt} er USING (erid) WHERE eqrt.type = 'transaction' AND eqrt.etid = %d", $object->txnid);
    while ($row = db_fetch_object($res)) {
      if ($row->type == 'quickpay' and $row->status == RECEIPT_STATUS_RECEIVED) {
        $links['capture'] = array(
          'title' => t('Capture payments'),
          'href' => 'store/transaction/'. $object->txnid .'/quickpay_capture',
          'query' => drupal_get_destination(),
          'attributes' => array(
            'title' => t('Capture'),
          ),
        );
        break;
      }
    }
  }
  return $links;
}

/**
 * Attempt capture on all QuickPay receipts on a transaction.
 *
 */
function ec_quickpay_transaction_capture($transaction, $interactive = TRUE) {
  $res = db_query("SELECT eqrt.erid, er.status, er.type FROM {ec_quickpay_receipt_transaction} eqrt LEFT JOIN {ec_receipt} er USING (erid) WHERE eqrt.type = 'transaction' AND eqrt.etid = %d", $transaction->txnid);
  while ($row = db_fetch_object($res)) {
    $receipt = ec_receipt_load($row->erid);
    if ($receipt->type == 'quickpay' and $receipt->status == RECEIPT_STATUS_RECEIVED) {
      $qptxn = quickpay_capture(array('transaction' => $receipt->extern_id,
                                      'currency' => $receipt->currency),
                                $receipt->amount);
      if (quickpay_successful($qptxn)) {
        if ($interactive) {
          drupal_set_message(t('Successfully captured.'));
        }
        $receipt->status = RECEIPT_STATUS_COMPLETED;
        ec_receipt_save($receipt);
      }
      else {
        $error = _quickpay_qpstat_codes($qptxn['qpstat']);
        if ($interactive) {
          drupal_set_message(t('Capture failed, type: %error, message: %message',
                               array('%error' => $error,
                                     '%message' => $qptxn['qpstatqpstatmsg'])), 'error');
        }
        watchdog('quickpay', 'Capture failed for transaction !txnid, type: %error, message: %message',
                 array('%error' => $error, '%message' => $qptxn['qpstatmsg'],
                       '!txnid' => $transaction->txnid),
                 WATCHDOG_ERROR);
        $receipt->status = RECEIPT_STATUS_FAILED;
        ec_receipt_save($receipt);
      }
    }
  }
  if ($interactive) {
    drupal_goto('admin/transaction/' . $transaction->txnid);
  }
}

/**
 * Implementation of hook_action_info().
 */
function ec_quickpay_action_info() {
  return array(
    'ec_quickpay_action_transaction_capture' => array(
      'type' => 'transaction',
      'description' => t('Capture QuickPay payments on transaction'),
      'configurable' => FALSE,
      'hooks' => array(),
    ),
  );
}

/**
 * Action callback.
 */
function ec_quickpay_action_transaction_capture($txn, &$context) {
  // TODO: Do we need access control here?
  ec_quickpay_transaction_capture($txn, FALSE);
}

/**
 * Implementation of hook_views_api().
 */
function ec_quickpay_views_api() {
  return array('api' => 2.0);
}

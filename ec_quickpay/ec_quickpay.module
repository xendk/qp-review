<?php

// $Id$

/**
 * Implementation of menu_hook()
 */
function ec_quickpay_menu($may_cache) {

  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'store/payment/quickpay', 
      'title' => t('Credit Card Payment'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('ec_quickpay_form'),
      'access' => true, 
      'type' => MENU_CALLBACK
    );
    $items[] = array(
      'path' => 'admin/ecsettings/quickpay',
      'title' => 'QuickPay',
      'callback' => 'drupal_get_form',
      'callback arguments' => 'ec_quickpay_settings',
      'access' => user_access('administer store'),
      'type' => MENU_NORMAL_ITEM,
      'description' => t('Configuration for the QuickPay payment gateway'),
    );
  }
  return $items;
}

function ec_quickpay_settings() {
  $form = system_settings_form(quickpay_settings_form());
  return $form;
}

function ec_quickpay_paymentapi(&$txn, $op, $arg = '') {
  switch ($op) {
    case 'display name':
      // We want it extra nice on the checkout page.
      return t('QuickPay') . ((arg(0) == 'cart' and arg(1) == 'checkout') ?
                              "<br />" . theme('quickpay_cards',
                                               quickpay_supported_cards()) :
                              "");

    case 'on checkout':
      ec_quickpay_verify_checkout($txn);
      break;

    case 'payment page':
      if ($txn->gross > 0) {
        return ec_quickpay_goto($txn);
      }
      break;
    }
}

function ec_quickpay_form_alter($form_id, &$form) {
  if ($form_id == 'store_transaction_form') {
    if ($form['overview'] and
	$form['overview']['payment_method']['#default_value'] == 'ec_quickpay') {
      $form['overview']['payment_method']['#description'] =
	t('<em>WARNING:</em> Changing payment status might lose the QuickPay status. Please cancel the transaction before changing payment method.');
      $form['overview']['quickpay'] =
	array('#type' => 'fieldset',
	      '#title' => t('QuickPay'));

      $transaction = $form['#parameters'][1]->payment->cc_refnum;
      
      $form['overview']['quickpay']['admin'] =
	array('#type' => 'markup',
	      '#value' => l(t('Quickpay administration'),
			    'https://secure.quickpay.dk/payments/index.php',
			    array('target' => 'ec_quickpay'),
			    'searchType=word&keyword=' . $transaction .
			    '&transaction=1&showDeleted=0'));
			    
      $payment_status = $form['overview']['payment_status']['#default_value'];
      if ($payment_status == 7) {
	// payment received.
	// capture
	$form['overview']['quickpay']['capture'] =
	  array('#type' => 'submit',
		'#value' => t('Capture'));
	// reverse
	$form['overview']['quickpay']['reverse'] =
	  array('#type' => 'submit',
		'#value' => t('Reverse'));
      }
      $form['#submit']['ec_quickpay_transaction_submit'] = array();
    }
  }
}

function ec_quickpay_transaction_submit($form_id, $form_values) {
  if ($form_values['op'] == t('Capture') or 
      $form_values['op'] == t('Reverse')) {
    $txn = store_transaction_load($form_values['txnid']);
    $payment = $txn->payment;
    if ($form_values['op'] == t('Capture')) {
      $qptxn = quickpay_capture(array('transaction' => $payment->cc_refnum),
				$payment->cc_amount);
      if (quickpay_successful($qptxn)) {
	drupal_set_message(t('Successfully captured.'));
	store_transaction_save(array('txnid' => $txn->txnid,
				     'payment_method' => 'ec_quickpay',
				     'payment' => $payment,
				     'payment_status' =>
				     payment_get_status_id('completed')));
      } else {
	$error = _quickpay_qpstat_codes($qptxn['qpstat']);
	drupal_set_message(t('Capture failed, reason given: %error',
			     array('%error' => $error)), 'error');
	store_transaction_save(array('txnid' => $txn->txnid,
				     'payment_method' => 'ec_quickpay',
				     'payment' => $payment,
				     'payment_status' =>
				     payment_get_status_id('failed')));
      }
    } elseif ($form_values['op'] == t('Reverse')) {
      $qptxn = quickpay_cancel(array('transaction' => $payment->cc_refnum));
      if (quickpay_successful($qptxn)) {
	drupal_set_message(t('Successfully reversed.'));
	store_transaction_save(array('txnid' => $txn->txnid,
				     'payment_method' => 'ec_quickpay',
				     'payment' => $payment,
				     'payment_status' =>
				     payment_get_status_id('canceled')));
      } else {
	$error = _quickpay_qpstat_codes($qptxn['qpstat']);
	drupal_set_message(t('Reversal failed, reason given: %error',
			     array('%error' => $error)), 'error');
	store_transaction_save(array('txnid' => $txn->txnid,
				     'payment_method' => 'ec_quickpay',
				     'payment' => $payment,
				     'payment_status' =>
				     payment_get_status_id('failed')));
      }
    }
    $dest = drupal_get_destination();
    unset($_REQUEST['destination'], $_REQUEST['edit']['destination']);
    return array('admin/store/transaction/edit/'. $form_values['txnid'],
		 $dest . '&section=' . $_GET['section']);
  }
}

/**
 * Called immediately after the user has clicked the checkout button.
 *
 * Redirect the user to the local payment page, which will either present a
 * form for going to QuickPays hosted page, or (if SSL) present a local form.
 */
function ec_quickpay_goto($txn) {
  global $base_url;
  $payment_url = url('store/payment/quickpay/'. $txn->txnid, NULL, NULL, TRUE);
  drupal_goto($payment_url);
  exit();
}


/**
 * Implementation of hook_ec_transactionapi().
 */
function ec_quickpay_ec_transactionapi(&$txn, $op, $a3 = NULL, $a4 = NULL) {
  if ($txn->payment_method != 'ec_quickpay') return NULL;
  switch ($op) {
    case 'load':
      $txn->payment = db_fetch_object(db_query("SELECT * FROM {ec_credit_card} WHERE txnid = %d", $txn->txnid));
      break;
    case 'insert':
    case 'update':
      payment_cc_save($txn);
      break;
    case 'delete':
      payment_cc_delete($txn);
      break;
  }
}

function ec_quickpay_verify_checkout($txn) {
  $estimate = store_transaction_calc_gross($txn);
  // Not sure this is strictly needed, but might as well
  if (0 > $estimate) {
    form_set_error('gross', t('Your purchase total must be at least %min-purchase-amount for QuickPay purchases.', array('%min-purchase-amount' => payment_format('0.00'))));
  }
}

/**
 * Build the credit card form.
 */
function ec_quickpay_form($txnid, $error = null) {
  global $user, $base_url;

  $txn = store_transaction_load($txnid);

  // Make sure the user owns the transaction or is an admin.
  if ($user->uid != $txn->uid && $user->uid != 1  && !user_access('administer store')) {
    return drupal_access_denied();
  }

  if ($error) {
    // Now it's not an error anymore, the user just cancelled.
    // drupal_set_message("QuickPay didn't approve the payment, please try again.", 'error');
  }
  
  // Build a list of items to show the user
  if ($txn->items) {
    foreach ($txn->items as $p) {
      $subtotal += $p->qty * $p->price;
      $items[] = t('%order of <b>%title</b> at %price each',
		   array('%order' =>
			 format_plural($p->qty, '1 order', '@count orders'),
			 '%title' => $p->title,
			 '%price' => payment_format($p->price)));
    }
  }
  $form['items'] = array('#value' => theme('item_list', $items, t('Your items')). '</p>');

  
  // Build the form to send them to quickpay.
  $form2 = quickpay_hosted_form(store_transaction_calc_gross($txn),
				$txn->txnid,
				'ec-quickpay-form', 
				url(quickpay_success_url($txn), null, null, true),
				url('store/payment/quickpay/' . $txn->txnid .
				    '/cancel', null, null, true),
				url('quickpay/' . $txn->txnid, null, null,
				    true));
  $form = array_merge($form, $form2);
  return $form;
}

/**
 * Implementation of hook_quickpay_popdown().
 */
function ec_quickpay_quickpay_popdown($txnid, $status) {
  global $user;
  if (!is_numeric($txnid)) {
    return null;
  }

  $txn = store_transaction_load($txnid);

  // Make sure the user owns the transaction or is an admin.
  if ($user->uid != $txn->uid && $user->uid != 1  &&
      !user_access('administer store')) {
    return null;
  }


  if ($status == 'success') {
    $url = url(quickpay_success_url($txn), null, null, true);
  } else { 
    // FIXME: configurable errorpage?
    $url = url('store/payment/quickpay/' . $txn->txnid . '/cancel',
	       null, null, true);
  }
  return $url;
}

/**
 * Implementation of hook_quickpay_callback().
 */
function ec_quickpay_quickpay_callback($txnid, $transaction) {
  if (!is_numeric($txnid)) {
    return null;
  }
  
  $txn = store_transaction_load($txnid);
  if (!$txn) {
    return null;
  }

  if ($txn->payment_method != 'ec_quickpay') {
   watchdog('quickpay', t('Order @txn wasn\'t a QuickPay order',
			  array('@txn' => $txn->txnid)), WATCHDOG_ERROR);
   return false;
  }

  if (!$transaction) {
    // quickpay_from_callback already logged it.
    drupal_access_denied();
    return;
  }
  
  $payment = new StdClass;
  $payment->cc_amount = $transaction['amount'];
  $payment->cc_refnum = $transaction['transaction'];
  $payment->cc_ordernum = $transaction['ordernumber'];
  $codes = _quickpay_qpstat_codes();
  $payment->cc_reason = $transaction['qpstat'] . ": " .
    $codes[$transaction['qpstat']];

  _ec_quickpay_handle_transaction($txn, $payment, $transaction);
}

function _ec_quickpay_handle_transaction($txn, $payment, $transaction) {
  switch (quickpay_result($transaction)) {
  case 'success': // Accepted
    // FIXME: check if we're autocapturing and set it completed if that's the
    // FIXME: case
    store_transaction_save(array('txnid' => $txn->txnid,
				 'payment_method' => 'ec_quickpay',
				 'payment' => $payment,
				 'payment_status' =>
				 payment_get_status_id('payment received'))); 
    watchdog('quickpay',
	     t('Payment authorized for transaction %txn.',
	       array('%txn' => $txn->txnid)), WATCHDOG_NOTICE,
	     'admin/store/transaction/edit/' . $txn->txnid .
	     '&section=overview');
    return true;
    break;
  case 'failed': // Failed
    // Handled as denied.
    store_transaction_save(array('txnid' => $txn->txnid,
				 'payment_method' => 'ec_quickpay',
				 'payment' => $payment,
				 'payment_status' =>
				 payment_get_status_id('failed')));
    watchdog('quickpay',
	     t('Payment failed for transaction %txn: %message.',
	       array('%txn' => $txn->txnid,
		     '%message' => $transaction['qpstatmsg'])),
	     WATCHDOG_NOTICE,
	     'admin/store/transaction/edit/' . $txn->txnid .
	     '&section=overview');
    return $transaction['qpstatmsg'];
    break;
  case 'error': // Errors
    // All these are handled as internal error.
    watchdog('quickpay',
	     t('Transaction code %code (%message), transaction %txn is set failed, but something might be wrong.',
	       array('%code' => $transaction['qpstat'], '%txn' => $txn->txnid,
	       '%message' => $transaction['message'])), WATCHDOG_ERROR,
	     'admin/store/transaction/edit/' . $txn->txnid .
	     '&section=overview');
    store_transaction_save(array('txnid' => $txn->txnid,
				 'payment_method' => 'ec_quickpay',
				 'payment' => $payment,
				 'payment_status' =>
				 payment_get_status_id('failed')));
    return null;    
    break;
  default:
    watchdog('quickpay',
	     t('Unknown transaction code %code for transaction %txn, transaction ignored.',
	       array('%code' => $transaction['qpstat'],
		     '%txn' => $txn->txnid,
		     '%message' => $transaction['qpstatmsg'])),
	     WATCHDOG_ERROR, 'admin/store/transaction/edit/' . $txn->txnid .
	     '&section=overview');
    return null;
  }
}
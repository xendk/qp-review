<?php
function commerce_quickpay_menu() {
	$items = array();
	
	$items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/quickpay-capture'] = array(
		'title' => t('Capture'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('commerce_quickpay_capture_form', 3, 5),
		'access callback' => 'commerce_quickpay_capture_access',
		'access arguments' => array(3, 5),
		'type' => MENU_LOCAL_TASK,
		'context' => MENU_CONTEXT_INLINE,
		'weight' => 2,
	);
	
	$items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/quickpay-refund'] = array(
		'title' => t('Refund'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('commerce_quickpay_refund_form', 3, 5),
		'access callback' => 'commerce_quickpay_refund_access',
		'access arguments' => array(3, 5),
		'type' => MENU_LOCAL_TASK,
		'context' => MENU_CONTEXT_INLINE,
		'weight' => 2,
	);
	
	return $items;
}

function commerce_quickpay_capture_access($order, $transaction) {	
	if ($transaction->payment_method != 'quickpay') {
    return FALSE;
  }
	
	if($transaction->remote_status != 'Authorized') {
		return FALSE;
	}
	
	$balance = commerce_payment_order_balance($order);
	if($balance['amount'] == 0) {
		return FALSE;
	}
	
  // Return FALSE if it is more than 30 days past the original authorization.
  if (time() - $transaction->created > 86400 * 30) {
    return FALSE;
  }

  // Allow access if the user can update payments on this order.
  return commerce_payment_transaction_access('update', $order, $transaction);
};

function commerce_quickpay_refund_access($order, $transaction) {
	if($transaction->remote_status != 'Captured') {
		return FALSE;
	}
	
	// Allow access if the user can update payments on this order.
  return commerce_payment_transaction_access('update', $order, $transaction);	
}

function commerce_quickpay_capture_form($form, &$form_state, $order, $transaction) {
	$form_state['order'] = $order;
  $form_state['transaction'] = $transaction;
  
	// Load and store the payment method instance for this transaction.
  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
  $form_state['payment_method'] = $payment_method;

  $balance = commerce_payment_order_balance($order);

  // Convert the price amount to a user friendly decimal value.
  if ($balance['amount'] > 0 && $balance['amount'] < $transaction->amount) {
    $default_amount = (float)($balance['amount']/100);
  }
  else {
    $default_amount = (float)($transaction->amount/100);
  }

	$form['amount'] = array(
    '#type' => 'hidden',
    '#default_value' => $default_amount,
  );

  $form['display'] = array(
    '#type' => 'item',
    '#title' => t('Are you sure you want to capture amount: @amount @currency', array(
    	'@amount' => $default_amount,
    	'@currency' => $transaction->currency_code,
    	)
    ),
  );
  
  $form = confirm_form($form,
    t('Capture Transaction'),
    'admin/commerce/orders/' . $order->order_id . '/payment',
    '',
    t('Capture'),
    t('Cancel'),
    'confirm'
  );
  
  return $form;
}

function commerce_quickpay_refund_form($form, &$form_state, $order, $transaction) {
	$form_state['order'] = $order;
  $form_state['transaction'] = $transaction;
  
	// Load and store the payment method instance for this transaction.
  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
  $form_state['payment_method'] = $payment_method;
	
	$default_amount = (float)($transaction->amount/100);
	
	$form['amount'] = array(
    '#type' => 'hidden',
    '#default_value' => $default_amount,
  );
	
  $form['display'] = array(
    '#type' => 'item',
    '#title' => t('Are you sure you want to refund amount: @amount @currency', array(
    	'@amount' => $default_amount,
    	'@currency' => $transaction->currency_code,
    	)
    ),
  );

	$form = confirm_form($form,
    t('Refund Transaction'),
    'admin/commerce/orders/' . $order->order_id . '/payment',
    '',
    t('Refund'),
    t('Cancel'),
    'confirm'
  );
	return $form;
}

function commerce_quickpay_capture_form_validate($form, &$form_state) {
	$transaction = $form_state['transaction'];
	
	$amount = $form_state['values']['amount'];
		
	// If the authorization has expired, display an error message and redirect.
  if (time() - $transaction->created > 86400 * 30) {
    drupal_set_message(t('This authorization has passed its 30 day limit cannot be captured.'), 'error');
    drupal_goto('admin/commerce/orders/' . $form_state['order']->order_id . '/payment');
  }
}

function commerce_quickpay_capture_form_submit($form, &$form_state) {
	$transaction = $form_state['transaction'];
	$amount = $form_state['values']['amount'];
	
	$payment_method = commerce_payment_method_instance_load('quickpay|commerce_payment_quickpay');
	
	$response = quickpay_capture($transaction, $amount);
	_commerce_quickpay_handle_transaction($transaction->order_id, $payment_method, $response);
	
	if (quickpay_successful($response)) {
		drupal_goto('admin/commerce/orders/' . $form_state['order']->order_id . '/payment');
		return TRUE;
	}
}

function commerce_quickpay_refund_form_submit($form, &$form_state) {
	$transaction = $form_state['transaction'];
	$amount = $form_state['values']['amount'];
	
	$payment_method = commerce_payment_method_instance_load('quickpay|commerce_payment_quickpay');
	
	$response = quickpay_refund($transaction, $amount);
	_commerce_quickpay_handle_transaction($transaction->order_id, $payment_method, $response);
	
	if (quickpay_successful($response)) {
		drupal_goto('admin/commerce/orders/' . $form_state['order']->order_id . '/payment');
		return TRUE;
	}
}

function commerce_quickpay_commerce_payment_method_info() {
	$payment_methods = array();

	$payment_methods['quickpay'] = array(
		'base' => 'commerce_quickpay',
		'title' => t('Quickpay'),
		'short_title' => t('Quickpay'),
		'description' => t('Quickpay credit card payment gateway'),
		'terminal' => FALSE,
		'offsite' => TRUE,
		'active' => TRUE,
	);

	return $payment_methods;
}

function commerce_quickpay_redirect_form($form, $form_state, $order, $payment_method) {
	if (!variable_get('quickpay_merchant','')) {
		drupal_set_message(t('Quickpay is not configured for use. No merchant ID has been specified.'), 'error');
		return array();
	}

	$settings = array(
		'continueurl' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
		'cancelurl' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
		'callbackurl' => url(_quickpay_md5_path('quickpay/' . $order->order_number . '/' . $payment_method['instance_id']), array('absolute' => TRUE)),
		'autocapture' => FALSE,
		'msgtype' => 'authorize',

	);
	
	return commerce_quickpay_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

function commerce_quickpay_order_form($form, $form_state, $order, $settings) {
	$md5_order = array(
		'protocol',
		'msgtype',
		'merchant',
		'language',
		'ordernumber',
		'amount',
		'currency',
		'continueurl',
		'cancelurl',
		'callbackurl',
		'autocapture',
		'autofee',
		'cardtypelock',
		'description',
		'testmode',
	);	
	
	$form['#action'] = 'https://secure.quickpay.dk/form/';
	
	$wrapper = entity_metadata_wrapper('commerce_order', $order);

	$currency_code = $wrapper->commerce_order_total->currency_code->value();
	$amount = (int)$wrapper->commerce_order_total->amount->value();
	
	$prefix = variable_get('quickpay_order_prefix', '');
	
	$order_number = $prefix . sprintf("%04d", $order->order_number);

	if (variable_get('quickpay_test_mode', FALSE) == TRUE) {
		$order_number .= "T";
	}

	
	$cards = variable_get('quickpay_accepted_cards', array());
	
	foreach($cards as $key => $val) {
		if(empty($val)) {
			unset($cards[$key]);
		}
	}
	
  unset($cards['ikano']); // Aren't supported in cardtypelock.
	
	$data = array(
		'protocol' => QUICKPAY_VERSION,
		'msgtype' => 'authorize',
		'merchant' => variable_get('quickpay_merchant', ''),
		'language' => variable_get('quickpay_hosted_language', ''),
		'ordernumber' => $order_number,
		'amount' => $amount,
		'currency' => $currency_code,
		'callbackurl' => $settings['callbackurl'],
		'continueurl' => $settings['continueurl'],
		'cancelurl' => $settings['cancelurl'],
		'autocapture' => variable_get('quickpay_auto_capture', FALSE),
		'description' => '',
		'testmode' => variable_get('quickpay_test_mode', FALSE),
		'autofee' => variable_get('quickpay_autofee', FALSE),
		'cardtypelock' => join(',', array_keys($cards)),
	);
	


	$md5_string = "";
	foreach ($md5_order as $key) {
		$md5_string .= $data[$key];
	}

	$data['md5check'] = md5($md5_string . variable_get('quickpay_secret',''));
	
	foreach ($data as $key => $val) {
		$form[$key] = array('#type' => 'hidden', '#value' => $val);
	}
	
	$form['submit'] = array('#type' => 'submit', '#value' => variable_get('quickpay_hosted_link_button', 'Continue to payment'));
	
	// Change stuff, if we want to use the popup
	$data['continueurl'] = url('quickpay_popdown/' . $order->order_id . '/success', array( 'absolute' => TRUE));
  $data['cancelurl'] = url('quickpay_popdown/' . $order->order_id . '/cancel', array('absolute' => TRUE));
  $md5_string = "";
  foreach ($md5_order as $field) {
    $md5_string .= $data[$field];
  }

  $data['md5check'] = md5($md5_string . variable_get('quickpay_secret', ''));
  
  // Interpolation of arrays in strings is iffy. Lets just use regular scalars.
  $continueurl = $data['continueurl'];
  $cancelurl = $data['cancelurl'];
  $md5check = $data['md5check'];
	
	if (variable_get('quickpay_hosted_popup', FALSE)) {
    $js = <<<EOF
      jQuery(document).ready(function() {
        jQuery('#commerce-quickpay-redirect-form').submit(function() {
          var left = (screen.width) ? (screen.width-670)/2 : 0;
          var top = (screen.height) ? (screen.height-500)/2 : 0;
          jQuery(this).find('input[name="continueurl"]')[0].value='{$continueurl}';
  	      jQuery(this).find('input[name="cancelurl"]')[0].value='{$cancelurl}';
	        jQuery(this).find('input[name="md5check"]')[0].value='{$md5check}';
          window.open('','quickpay_payment', 'top=' + top + ',left=' + left + ',height=500,width=670,scrollbars=yes,toolbars=no,statusbar=yes,location=0');
          jQuery(this).attr('target', 'quickpay_payment');
          return true;
        });
      });
EOF;
    drupal_add_js($js, 'inline');
  }
	
	return $form;
}


/**
 * Implementation of hook_quickpay_popdown().
 */
function commerce_quickpay_popdown($order_number, $status) {
	$order = commerce_order_load_by_number($order_number);
	
	if(!$order) {
		return FALSE;
	}
	
	if ($status == 'cancel') {
		return url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
	}
	
	if ($status == 'success') {
		return url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
	}
}


/**
 * Implementation of hook_quickpay_callback().
 */
function commerce_quickpay_quickpay_callback($order_id, $transaction) {
	$order = commerce_order_load($order_id);
	
	if ($order === FALSE) {
		watchdog('quickpay', 'The order number @order_id does not exist', array('@order_id' => $order_id), WATCHDOG_ERROR);
		return FALSE;
	}
	
	if ($order->data['payment_method'] != "quickpay|commerce_payment_quickpay") {
		watchdog('quickpay', 'The order number @order_id is not a Quickpay order.', array('@order_id' => $order_id), WATCHDOG_ERROR);
		return FALSE;
	}
	
	$payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
	
	_commerce_quickpay_handle_transaction($order_id, $payment_method, $transaction);
	
	if (quickpay_successful($transaction)) {
		return TRUE;
	}
	
}


function _commerce_quickpay_handle_transaction($order_id, $payment_method, $transaction) {
	switch (quickpay_result($transaction)) {
		case 'success':
			if (empty($transaction['transaction'])) {
				watchdog('commerce_quickpay',
						 'Payment failed, missing transaction ID. (Order: %order - Transaction: %transaction)',
						 array('%transaction' => $transaction['transaction'], '%order' => $order_id),
						 WATCHDOG_EMERG,
						 'admin/commerce/orders/' . $order_id
				);
				return NULL;
			}
			
			$states = _quickpay_state_codes();
			switch ($states[$transaction['state']]) {
				case 'Captured':
					$t = commerce_payment_transaction_new('quickpay', $order_id);
					$t->instance_id = $payment_method['instance_id'];
					$t->remote_id = $transaction['transaction'];
					$t->amount = (int)($transaction['amount']*100);
					$t->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
					$t->message =  t('Captured !amount, using @cardtype.', array('!amount' => $transaction['amount'], '@cardtype' => $transaction['cardtype']));
					$t->currency_code = $transaction['currency'];
					$t->payload[REQUEST_TIME] = $transaction;
					$t->remote_status = $states[$transaction['state']];
					
					commerce_payment_transaction_save($t);
					$transaction['commerce_transaction_id'] = $t->transaction_id;
					
					$order = commerce_order_load($order_id);
					commerce_order_status_update($order, 'completed', FALSE, TRUE, 'Completed by Commerce QuickPay Payment module.');
					
					watchdog('commerce_quickpay', 'Captured transaction ID @txn_id for order @order_number.', array('@txn_id' => $transaction['commerce_transaction_id'], '@order_number' => $order_id), WATCHDOG_INFO);
					break;
				case 'Authorized':
					$t = commerce_payment_transaction_new('quickpay', $order_id);
					$t->instance_id = $payment_method['instance_id'];
					$t->remote_id = $transaction['transaction'];
					$t->amount = (int)($transaction['amount']*100);
					$t->status = COMMERCE_PAYMENT_STATUS_PENDING;
					$t->message =  t('Payment authorized for !amount, using @cardtype.', array('!amount' => $transaction['amount'], '@cardtype' => $transaction['cardtype']));
					$t->currency_code = $transaction['currency'];
					$t->payload[REQUEST_TIME] = $transaction;
					$t->remote_status = $states[$transaction['state']];
					
					commerce_payment_transaction_save($t);
					$transaction['commerce_transaction_id'] = $t->transaction_id;
					
					watchdog('commerce_quickpay', 'IPN processed for Order @order_number with ID @txn_id.', array('@txn_id' => $transaction['commerce_transaction_id'], '@order_number' => $order_id), WATCHDOG_INFO);
					
					if(variable_get('quickpay_autofee', FALSE) == TRUE) {
						commerce_quickpay_add_fee($order_id, $transaction);
					}
					
					if(variable_get('quickpay_autocapture', FALSE) == TRUE) {
						$response = quickpay_capture($t, ($transaction['amount']));
						_commerce_quickpay_handle_transaction($t->order_id, $payment_method, $response);
					}
					
					break;
				case 'Subscribed':
					break;
				case 'Canceled':
					break;
				case 'Refunded':
					$t = commerce_payment_transaction_new('quickpay', $order_id);
					$t->instance_id = $payment_method['instance_id'];
					$t->remote_id = $transaction['transaction'];
					$t->amount = (int)(-$transaction['amount']*100);
					$t->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
					$t->message =  t('Refunded !amount to @cardtype.', array('!amount' => $transaction['amount'], '@cardtype' => $transaction['cardtype']));
					$t->currency_code = $transaction['currency'];
					$t->payload[REQUEST_TIME] = $transaction;
					$t->remote_status = $states[$transaction['state']];
					
					commerce_payment_transaction_save($t);
					$transaction['commerce_transaction_id'] = $t->transaction_id;
					
					watchdog('commerce_quickpay', 'IPN processed for Order @order_number with ID @txn_id.', array('@txn_id' => $transaction['commerce_transaction_id'], '@order_number' => $order_id), WATCHDOG_INFO);
					break;
				default:
					watchdog('quickpay', 'Unknown state of the transaction: %state', array('%state' => $transaction['state']), WATCHDOG_ERROR);
					break;
			}
			
			
			break;
		case 'failed':
			break;
		case 'error':
			break;
		default:
			break;
	}
}

function commerce_quickpay_add_fee($order_id, $transaction) {
	$order = commerce_order_load($order_id);
	$product = commerce_product_load_by_sku('quickpay-fee');
	$line_item = commerce_product_line_item_new($product, 1, $order->order_id);

	$wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
	$wrapper->commerce_unit_price->amount = $transaction['fee']*100;
	$wrapper->commerce_unit_price->currency_code = $transaction['currency'];
	$wrapper->commerce_unit_price->data = array(
		'components' => array(
			array(
				'name' => 'base_price',
				'price' => array(
					'amount' => $transaction['fee']*100,
					'currency_code' => $transaction['currency'],
					'data' => array(),
				),
				'included' => 1,
			),
		),
	);
	
	$line_item = commerce_line_item_save($line_item);
	$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
	$order_wrapper->commerce_line_items[] = $line_item;
	commerce_order_save($order);
}
<?php
// $Id$

/**
 * @file
 * Integrates quickpay.dk redirected payment service.
 *
 * Development sponsored by QuickPay.
 *
 * Thanks to the author of uc_2checkout.module for inspiration.
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_quickpay_menu() {
  $items['cart/quickpay/complete'] = array(
    'title' => 'Order complete',
    'page callback' => 'uc_quickpay_complete',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_init().
 *
 * Big warning if UC isn't configured with a supported currency.
 */
function uc_quickpay_init() {
  if (!in_array(variable_get('uc_currency_code', ''), quickpay_supported_currencies())) {
    drupal_set_message(t('WARNING: Ãœbercart is set to use a currency not supported by QuickPay.'), 'error');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function uc_quickpay_form_alter(&$form, &$form_state, $form_id) {
  // FIXME: Possibly split out into uc_quickpay_<form_id>_form_alter
  global $_uc_quickpay_carddata;
  if ($form_id == 'uc_cart_checkout_review_form' &&
      ($order_id = intval($_SESSION['cart_order'])) > 0) {
    $order = uc_order_load($order_id);

    if ($order->payment_method == 'quickpay') {
      unset($form['submit']);
      $form['#prefix'] = '<table style="display: inline; padding-top: 1em;"><tr><td>';
      $form['#suffix'] = '</td><td>'. drupal_get_form('uc_quickpay_form', $order) .'</td></tr></table>';
    }
  }
  elseif ($form_id == 'uc_payment_by_order_form') {
    $order = uc_order_load($form['order_id']['#value']);
    if ($order->payment_method == 'quickpay') {
      $payment = _uc_quickpay_get_last_transaction($order->order_id);
      if ($payment) {
        // Default theme function doesn't render additional elements, so
        // we have to override.
        $form['#theme'] = 'uc_quickpay_by_order_form';
        $form['quickpay'] =
          array('#type' => 'fieldset',
                '#weight' => -5,
                '#title' => t('Quickpay'),
                );
        $form['quickpay']['admin'] =
        array('#type' => 'markup',
              '#value' => l(t('Quickpay administration'),
                            'https://manager.quickpay.dk/',
                            array(
                              'attributes' => array('target' => 'uc_quickpay'),
                              )));

        $balance = uc_payment_balance($order);

        // Round to 4 decimals, as UC have floating point rounding errors.
        if (round($balance, 4) != 0) {
          // Add capture
          $form['quickpay']['capture'] =
            array(
              '#type' => 'submit',
              '#value' => t('Capture'),
              '#validate' => array(),
              '#submit' => array('uc_quickpay_transaction_submit'),
              '#action' => 'capture',
            );
          // reverse
          $form['quickpay']['reverse'] =
            array(
              '#type' => 'submit',
              '#value' => t('Cancel'),
              '#validate' => array(),
              '#submit' => array('uc_quickpay_transaction_submit'),
              '#action' => 'cancel',
            );

        }
        elseif ($balance == $order->order_total) {
          // Add credit
        }
      }
    }
  }
}

/**
 * Form submission handler.
 *
 * Captures or cancels a transaction.
 */
function uc_quickpay_transaction_submit($form, &$form_state) {
  $order = uc_order_load($form_state['values']['order_id']);
  $payment = _uc_quickpay_get_last_transaction($order->order_id);
  if (in_array($form_state['clicked_button']['#action'], array('capture', 'cancel'))) {
    if ($form_state['clicked_button']['#action'] == 'capture') {
      $qptxn = quickpay_capture(array(
                 'transaction' => $payment->qp_transaction,
                 'currency' => variable_get('uc_currency_code', ''),
               ), $order->order_total);
      $action = 'Capture';
      $amount = $qptxn['amount'];
      $did = 'captured';
    }
    else {
      $qptxn = quickpay_cancel(array('transaction' => $payment->qp_transaction));
      $action = 'Cancel';
      $amount = 0;
      $did = 'cancelled';
    }
    
    if (quickpay_successful($qptxn)) {
      drupal_set_message(t("Successfully !did.", array('!did' => $did)));
      uc_payment_enter($order->order_id, 'quickpay', $amount, 0,
                       array('qp_transaction' => $transaction['transaction']),
                       drupal_ucfirst($did) . ' ' . $qptxn['amount']);
    }
    else {
      $error = _quickpay_qpstat_codes($qptxn['qpstat']);
      drupal_set_message(t('!action failed, type: %error, %message',
                           array('%error' => $error,
                                 '%message' => $qptxn['qpstatmsg'],
                                 '!action' => $action)), 'error');
      uc_payment_enter($order->order_id, 'quickpay', 0, 0,
                       array('qp_transaction' =>
                             $transaction['transaction']),
                       $action . ' failed, error: ' . $error);
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function uc_quickpay_theme() {
  return array(
    'uc_quickpay_by_order_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}


/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_payment_method().
 */
function uc_quickpay_payment_method() {
  $title = t("Credit card via Quickpay: " ) . // "<br />" .
    theme('quickpay_cards', quickpay_supported_cards());

  $methods[] = array(
    'id' => 'quickpay',
    'name' => t('QuickPay'),
    'title' => $title,
    'review' => t('Credit card'),
    'desc' => t('Redirect to QuickPay to pay by credit card.'),
    'callback' => 'uc_payment_method_quickpay',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}


/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

function theme_uc_quickpay_by_order_form($form) {
  $output = '<p><strong>'. t('Order total:') .'</strong> '. drupal_render($form['order_total'])
    .'<br /><strong>'. t('Current balance:') .'</strong> '
    . drupal_render($form['balance']) .'</p>';
  $output .= '<p>'. drupal_render($form['payments']) .'</p>'
    .'<p>'. drupal_render($form['form_id'])
    . drupal_render($form['form_token']) .
    drupal_render($form['quickpay']) . '</p>';
  return $output;
}

/**
 * Callback for quickpay payment method settings.
 */
function uc_payment_method_quickpay($op, &$arg1) {
  global $_uc_quickpay_carddata;
  switch ($op) {
    case 'cart-review':
      // Doing nothing, form_alter is handling this.
      return;
    case 'settings':
      $form = quickpay_settings_form();
      $form['uc_autocapture'] = array(
        '#type' => 'checkbox',
        '#title' => t('Autocapture non-shippable'),
        '#description' => t("Automatically capture payments on transactions that only contains products that aren't shippable. <em>WARNING</em>: Only use if all the available non-shippable products are in effect \"delivered\" on checkout (instant access subscriptions, for instance), this is a requirement from QuickPay/PBS. "),
        '#default_value' => variable_get('uc_autocapture', FALSE),
      );
      return $form;
    case 'order-delete':
      // FIXME: Delete associated transactions?
  }
}

// Form to build the submission to quickpay.dk
function uc_quickpay_form(&$form_state, $order) {
  if (variable_get('uc_autocapture', FALSE)) {
    // Autocapture is only enabled for orders where no products are shippable
    $autocapture = TRUE;
    foreach ($order->products as $product) {
      if ($product->shippable) {
        $autocapture = FALSE;
        break;
      }
    }
  }
  $form = quickpay_hosted_form($order->order_total,
                               variable_get('uc_currency_code', ''),
                               $order->order_id,
                               'uc-quickpay-form',
                               url('cart/quickpay/complete/' .
                                   uc_cart_get_id(), array('absolute' => TRUE)),
                               url('cart/checkout/review', array('absolute' => TRUE)),
                               url('quickpay/' .
                                   $order->order_id, array( 'absolute' => TRUE)),
                               $autocapture);
  return $form;
}

function uc_quickpay_complete($cart_id = 0) {
  $order = uc_order_load($_SESSION['cart_order']);

  if ($order === FALSE || !in_array(uc_order_status_data($order->order_status, 'state'), array('in_checkout',
                                                                                              'post_checkout'))) {
    print t('An error has occurred during payment.  Please contact us to ensure your order has submitted.');
    exit();
  }

  $_SESSION['last_order'] = $order->order_id;
  $output .= uc_cart_complete_sale($order, variable_get('uc_new_customer_login', FALSE));

  return $output;
}

/**
 * Implementation of hook_quickpay_callback().
 */
function uc_quickpay_quickpay_callback($order_id, $transaction) {
  if (!is_numeric($order_id)) {
    return NULL;
  }

  $order = uc_order_load($order_id);

  if ($order === FALSE || uc_order_status_data($order->order_status, 'state') != 'in_checkout') {
    if ($order === FALSE) {
      watchdog('quickpay', 'Unknown order @order_id in callback.',
               array('@order' => $order_id), WATCHDOG_ERROR);
    }
    else {
      watchdog('quickpay', 'Order @order_id has wrong state \'@state\'.',
        array('@order' => $order->order_id,
          '@state' => uc_order_status_data($order->order_status, 'state')), WATCHDOG_ERROR);
    }
    return FALSE;
  }

  if ($order->payment_method != 'quickpay') {
   watchdog('quickpay', t('Order @order_id wasn\'t a QuickPay order',
                          array('@order_id' => $order->order_id)), WATCHDOG_ERROR);
   drupal_access_denied();
   return;
  }
  
  _uc_quickpay_handle_transaction($order, $transaction);

  if (quickpay_successful($transaction)) {
    // Move the transaction to post_checkout. Normally
    // uc_cart_complete_sale() does this, but we can't call it here.
    uc_order_update_status($order->order_id, uc_order_state_default('post_checkout'));
  }
}

/**
 * Implementation of hook_quickpay_popdown().
 */
function uc_quickpay_quickpay_popdown($order_id, $status) {
  if (!is_numeric($order_id)) {
    return NULL;
  }

  $order = uc_order_load($order_id);

  if ($order === FALSE || !in_array(uc_order_status_data($order->order_status, 'state'), array('in_checkout', 'post_checkout'))) {
    if ($order === FALSE) {
      watchdog('quickpay', 'Unknown order @order_id in success page.', array('@order' => $order_id), WATCHDOG_ERROR);
    }
    else {
      watchdog('quickpay', 'Order @order_id has wrong state \'@state\'.',
        array('@order' => $order->order_id,
          '@state' => uc_order_status_data($order->order_status, 'state')), WATCHDOG_ERROR);
    }
    return NULL;
  }

  if ($status == 'success') {
    $url = url('cart/quickpay/complete/' . uc_cart_get_id(), array('absolute' => TRUE));
  }
  else {
    // User cancelled.
    $url = url('cart/checkout/review', array('absolute' => TRUE));
  }

  return $url;
}

/*******************************************************************************
 * Internal Functions
 ******************************************************************************/

function _uc_quickpay_handle_transaction($order, $transaction) {
  switch (quickpay_result($transaction)) {
  case 'success': // Accepted
    $states = _quickpay_state_codes();
    // If autocapture, transaction state is 'Captured' -- log payment
    if ($states[$transaction['state']] == "Captured") {
      uc_payment_enter($order->order_id,
        'quickpay', $transaction['amount'], 0,
        array('qp_transaction' => $transaction['transaction']),
        'Quickpay transaction ID: ' . $transaction['transaction']);
      watchdog('quickpay',
        'Payment captured for order %order.',
        array('%order' => $order->order_id), WATCHDOG_NOTICE,
        'admin/store/orders/' . $order->order_id);
    }
    else {
      // Otherwise, save for later capture
      uc_order_comment_save($order->order_id, 0,
                            t('Payment authorized for !amount.',
                              array('!amount' => $transaction['amount'])),
                            'admin');
      // Log a 0 amount payment, used to get the transaction id later.
      uc_payment_enter($order->order_id,
                       'quickpay', 0, 0,
                       array('qp_transaction' => $transaction['transaction']),
                       'Authorized for ' . $transaction['amount'] .
                       '. Transaction ID: '. $transaction['transaction']);
      watchdog('quickpay',
               'Payment authorized for order %order.',
               array('%order' => $order->order_id), WATCHDOG_NOTICE,
               'admin/store/orders/' . $order->order_id);
        }
    return TRUE;
    break;
  case 'failed': // Failed
    // Handled as denied.
    uc_order_comment_save($order->order_id, 0,
                          t('Payment failed, message: %message.',
                            array('%message' => $transaction['qpstatmsg'])),
                          'admin');
    watchdog('quickpay',
             'Payment failed for order %order: %message.',
             array('%order' => $order->order_id,
                   '%message' => $transaction['qpstatmsg']),
             WATCHDOG_NOTICE,
             'admin/store/orders/' . $order->order_id);
    return $transaction['qpstatmsg'];
    break;
  case 'error': // Errors
    // All these are handled as internal error.
    watchdog('quickpay', 'Transaction code %code (%message, order %order. Something might be wrong.',
               array('%code' => $transaction['qpstat'],
                     '%order' => $order->order_id,
                     '%message' => $transaction['message']), WATCHDOG_ERROR,
             'admin/store/orders/' . $order->order_id);
    uc_order_comment_save($order->order_id, 0,
                          t('Payment failed with error, code %code message: %message.',
                            array('%code' => $transaction['qpstat'],
                                  '%message' => $transaction['qpstatmsg'])),
                          'admin');
    return NULL;
    break;
  default:
    watchdog('quickpay',
             'Unknown transaction code %code for order %order, transaction ignored.',
             array('%code' => $transaction['qpstat'],
                   '%order' => $order->order_id,
                   '%message' => $transaction['qpstatmsg']),
             WATCHDOG_ERROR, 'admin/store/orders/' . $order->order_id);
    uc_order_comment_save($order->order_id, 0,
                          t('Payment failed with unknown transaction code, code %code message: %message.',
                            array('%code' => $transaction['qpstat'],
                                  '%message' => $transaction['qpstatmsg'])),
                          'admin');
    return NULL;
  }
}

function _uc_quickpay_get_last_transaction($order_id) {
  $payments = uc_payment_load_payments($order_id);
  if (!$payments)
    return FALSE;
  // Loop backwards, in order to get the last.
  for ($i = sizeof($payments)-1; $i >= 0; $i--) {
    $payment = drupal_unpack($payments[$i]);
    if ($payment->qp_transaction) {
      return $payment;
    }
  }
  return FALSE;
}
